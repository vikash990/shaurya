{"version":3,"sources":["serviceWorker.js","Header.js","AddSubscriber.js","ShowSubscriber.js","TeleDirectory.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","props","className","heading","AddSusbscriber","inputChangedHandler","e","target","name","value","setState","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubscribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","subscribers","newSubscriber","length","exact","path","render","ReactDOM","TeleDirectory","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8889de04.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Header.css';\n\nconst Header = function (props) {\n    return (\n        <div className=\"header\">\n            <u>{props.heading}</u>\n        </div>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport Header from './Header';\nimport './AddSubscriber.css';\nimport { Link } from 'react-router-dom';\n\nclass AddSusbscriber extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            id: 0,\n            name: '',\n            phone: ''\n        }\n    }\n\n    inputChangedHandler = (e) => {\n        const state = this.state;\n        state[e.target.name] = e.target.value;\n        this.setState(state);\n    }\n\n    onFormSubmitted = (e) => {\n        e.preventDefault();\n        this.props.addSubscriberHandler(this.state);\n        this.setState({ id: 0, name: '', phone: ' ' });\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n\n        const { name, phone } = this.state;\n\n        return (\n            <div>\n                <Header heading=\"Add Subscriber\" />\n                <div className=\"component-body-container\">\n                    <Link to=\"/\">\n                        <button className=\"custom-btn back-btn\">Back</button>\n                    </Link>\n\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label>\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler} /><br /><br />\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label>\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler} /><br /><br />\n\n                        <div className=\"subscriber-info-container\">\n                            <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br />\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\n                        </div>\n\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddSusbscriber;","import React, { Component } from 'react';\nimport Header from './Header.js';\nimport './ShowSubscriber.css';\nimport { Link } from 'react-router-dom';\n\nclass ShowSubscribers extends Component {\n\n  onDeletedClick = (subscriberId) => {\n    this.props.deleteSubscriberHandler(subscriberId);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header heading=\"Telephone Directory\" />\n        <div className=\"component-body-container\">\n          <Link to=\"/add\">\n            <button className=\"custom-btn add-btn\">Add</button>\n          </Link>\n\n          <div className=\"grid-container heading-container\">\n            <span className=\"grid-item name-heading\">Name</span>\n            <span className=\"grid-item phone-heading\">Phone</span>\n          </div>\n\n          {\n            this.props.subscribersList.map(sub => {\n              return <div key={sub.id} className=\"grid-container\">\n                <span className=\"grid-item\">{sub.name}</span>\n                <span className=\"grid-item\">{sub.phone}</span>\n                <span className=\"grid-item action-btn-container\">\n                  <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, sub.id)}>Delete</button>\n                </span>\n              </div>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ShowSubscribers;","import React, { Component } from 'react';\nimport AddSubscriber from './AddSubscriber';\nimport ShowSubscribers from './ShowSubscriber';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nclass PhoneDirectory extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            subscribersList: []\n        }\n    }\n\n    deleteSubscriberHandler = (subscriberId) => {\n        let subscribersList = this.state.subscribersList;\n        let subscriberIndex = 0;\n        subscribersList.forEach(function (subscriber, index) {\n            if (subscriber.id === subscriberId) {\n                subscriberIndex = index;\n            }\n        }, this);\n        let newSubscribers = subscribersList;\n        newSubscribers.splice(subscriberIndex, 1);\n        this.setState({subscribers: newSubscribers});\n    }\n\n    addSubscriberHandler = (newSubscriber) => {\n        let subscribersList = this.state.subscribersList;\n        if (subscribersList.length > 0) {\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\n        } else {\n            newSubscriber.id = 1;\n        }\n        subscribersList.push(newSubscriber);\n        this.setState({ subscribersList: subscribersList });\n    }\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route exact path=\"/\" render={(props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList} deleteSubscriberHandler={this.deleteSubscriberHandler} />} />\n                    <Route exact path=\"/add\" render={({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler} />} />\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default PhoneDirectory;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './common/common.css';\nimport TeleDirectory from './TeleDirectory';\n\nReactDOM.render(<TeleDirectory />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}